---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  CLUSTER_DIR: "{{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig"
  OMNI_CLUSTER_CONFIG_FILE: "{{.KUBERNETES_DIR}}/bootstrap/talos/omni-config.yaml"
  HELMFILE_FILE: "{{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml"
  TALOSCONFIG_FILE: "{{.CLUSTER_DIR}}/talosconfig"
  OMNICONFIG_FILE: "{{.CLUSTER_DIR}}/omniconfig"

env:
  TALOSCONFIG: "{{.TALOSCONFIG_FILE}}"

tasks:

  bootstrap:
    desc: Bootstrap the Talos cluster
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - omnictl cluster template sync -f {{.OMNI_CLUSTER_CONFIG_FILE}} --omniconfig {{.OMNICONFIG_FILE}}
      - task: fetch-talosconfig
      - task: fetch-kubeconfig
      - task: install-helm-apps
      - talosctl health --server=false
    preconditions:
      - msg: Missing cluster config file
        sh: test -f {{.OMNI_CLUSTER_CONFIG_FILE}}
      - msg: Missing omniconfig file
        sh: test -f {{.OMNICONFIG_FILE}}
      - msg: Missing Sops config file
        sh: test -f {{.SOPS_CONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.AGE_FILE}}

  fetch-talosconfig:
    desc: Fetch talosconfig
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - |
        if [ -f "{{.TALOSCONFIG_FILE}}" ]; then
            rm {{.TALOSCONFIG_FILE}}
        fi
      - until omnictl talosconfig {{.TALOSCONFIG_FILE}} --break-glass -c {{.CLUSTER_NAME}} --omniconfig {{.OMNICONFIG_FILE}} | bash; do sleep 10; done
    preconditions:
      - msg: Missing omniconfig file
        sh: test -f {{.OMNICONFIG_FILE}}
    generates:
      - "{{.TALOSCONFIG_FILE}}"

  fetch-kubeconfig:
    desc: Fetch kubeconfig
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - |
        if [ -f "{{.KUBECONFIG_FILE}}" ]; then
            rm {{.KUBECONFIG_FILE}}
        fi
      - until omnictl kubeconfig {{.KUBECONFIG_FILE}} --break-glass -c {{.CLUSTER_NAME}} --omniconfig {{.OMNICONFIG_FILE}} | bash; do sleep 10; done
      - "sed -i 's/server: https:\\/\\/[0-9.]*:[0-9]*/server: https:\\/\\/10.0.0.122:6443/g' {{.KUBECONFIG_FILE}}"
    preconditions:
      - msg: Missing omniconfig file
        sh: test -f {{.OMNICONFIG_FILE}}
    generates:
      - "{{.KUBECONFIG_FILE}}"

  install-helm-apps:
    desc: Bootstrap core apps needed for Talos
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kubeconfig {{.KUBECONFIG_FILE}} --file {{.HELMFILE_FILE}} apply --skip-diff-on-install --suppress-diff
      - until kubectl --kubeconfig {{.KUBECONFIG_FILE}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG_FILE}}
      - msg: Missing helmfile
        sh: test -f {{.HELMFILE_FILE}}

  upgrade:
    desc: Upgrade Talos on a node
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmds:
      - talosctl --nodes {{.node}} upgrade --image {{.image}} --wait=true --timeout=10m --preserve=true --reboot-mode={{.mode}}
      - talosctl --nodes {{.node}} health --wait-timeout=10m --server=false
    vars:
      mode: '{{.mode | default "default"}}'
    requires:
      vars: ["node", "image"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info >/dev/null 2>&1
      - msg: Node not found
        sh: talosctl --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade Kubernetes across the cluster
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    cmd: talosctl --nodes {{.controller}} upgrade-k8s --to {{.to}}
    requires:
      vars: ["controller", "to"]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG_FILE}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info >/dev/null 2>&1
      - msg: Node not found
        sh: talosctl --nodes {{.controller}} get machineconfig >/dev/null 2>&1

  nuke:
    desc: Resets nodes back to maintenance mode
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: omnictl cluster delete {{.CLUSTER_NAME}} --omniconfig {{.OMNICONFIG_FILE}}

  .reset:
    internal: true
    cmd: rm -rf {{.CLUSTER_DIR}} {{.OMNI_CLUSTER_CONFIG_FILE}}
