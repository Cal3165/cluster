---
kind: Cluster
name: "#{ bootstrap_cluster_name | default('home-kubernetes', true) }#"
kubernetes:
  # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
  version: v1.32.3
talos:
  # renovate: datasource=docker depName=ghcr.io/siderolabs/installer
  version: v1.8.3
features:
  useEmbeddedDiscoveryService: #{ bootstrap_cluster_use_embedded_discovery_service | default(true) }#
#% for file in talos_patches('global') %#
#% if loop.index == 1 %#
# Cluster patches
patches:
#% endif %#
  - file: "patches/global/#{ file | basename }#"
#% endfor %#
#% if storage.piraeus.enabled %#
  - # Add drdb settings
    name: drdb-setup
    inline:
      machine:
        kernel:
          modules:
            - name: drbd
              parameters:
                - usermode_helper=disabled
            - name: drbd_transport_tcp
  #% endif %#
---
kind: ControlPlane
machines:
#% for node in bootstrap_node_inventory if node.controller %#
  - #{ node.node_id }#
#% endfor %#
# Controller patches
patches:
  #% if bootstrap_dns_servers | length %#
  - # Force nameserver
    name: dns-server
    inline:
      machine:
        network:
          nameservers:
            #% for item in bootstrap_dns_servers %#
            - #{ item }#
            #% endfor %#
  #% endif %#
  #% if bootstrap_ntp_servers | length %#
  - # Configure NTP
    name: ntp-server
    inline:
      machine:
        time:
          disabled: false
          servers:
            #% for item in bootstrap_ntp_servers %#
            - #{ item }#
            #% endfor %#
  #% endif %#
  #% if bootstrap_secureboot.enabled and bootstrap_secureboot.encrypt_disk_with_tpm %#
  - # Encrypt system disk with TPM
    |-
    name: tpm-disk-encryption
    inline:
      machine:
        systemDiskEncryption:
          ephemeral:
            provider: luks2
            keys:
              - slot: 0
                tpm: {}
          state:
            provider: luks2
            keys:
              - slot: 0
                tpm: {}
  #% endif %#
  #% for file in talos_patches('controller') %#
  - file: "patches/controller/#{ file | basename }#"
  #% endfor %#
---
kind: Workers
machines:
#% for node in bootstrap_node_inventory if not node.controller %#
  - #{ node.node_id }#
#% endfor %#
#% if (bootstrap_node_inventory | selectattr('controller', 'equalto', False) | list | length) and (talos_patches('worker') | length) %#
#% for file in talos_patches('worker') %#
#% if loop.index == 1 %#
# Worker patches
patches:
#% endif %#
  - file: "patches/worker/#{ file | basename }#"
#% endfor %#
#% endif %#

#% for node in bootstrap_node_inventory %#
---
kind: Machine
systemExtensions:
  #% for extension in bootstrap_extentions %#
    - #{ extension }#
  #% endfor %#
  #% if node.extra_extentions %#
  #% for extension in node.extra_extentions %#
    - #{ extension }#
  #% endfor %#
  #% endif %#
  #% if storage.piraeus.enabled %#
    - siderolabs/drbd
  #% endif %#
name: #{ node.node_id }#
install:
  disk: "#{ node.disk }#"
patches:
  - # Add network Config
    name: network-setup
    inline:
      machine:
        #% for label in node.labels %#
        #% if loop.index == 1 %#
        nodeLabels:
        #% endif %#
          #{ label.key }#: "#{ label.value }#"
        #% endfor %#
        network:
          hostname: #{ node.name.capitalize() }#
          interfaces:
            - deviceSelector:
                physical: true
              #% if bootstrap_vlan %#
              vlans:
                - vlanId: #{ bootstrap_vlan }#
                  addresses:
                    - "#{ node.address }#/#{ bootstrap_node_network.split('/') | last }#"
                  mtu: #{ node.mtu | default(1500) }#
                  routes:
                    - network: 0.0.0.0/0
                      #% if bootstrap_node_default_gateway %#
                      gateway: "#{ bootstrap_node_default_gateway }#"
                      #% else %#
                      gateway: "#{ bootstrap_node_network | nthhost(1) }#"
                      #% endif %#
                  #% if node.controller %#
                  vip:
                    ip: "#{ bootstrap_controller_vip }#"
                  #% endif %#
              #% else %#
              #% if node.address %#
              dhcp: false
              addresses:
                - "#{ node.address }#/#{ bootstrap_node_network.split('/') | last }#"
              routes:
                - network: 0.0.0.0/0
                  #% if bootstrap_node_default_gateway %#
                  gateway: "#{ bootstrap_node_default_gateway }#"
                  #% else %#
                  gateway: "#{ bootstrap_node_network | nthhost(1) }#"
                  #% endif %#
              #% else %#
              dhcp: true
              #% endif %#
              mtu: #{ node.mtu | default(1500) }#
              #% if node.controller %#
              vip:
                ip: "#{ bootstrap_controller_vip }#"
              #% endif %#
              #% endif %#
  #% if node.manifests %#
  - # Add extra manifests
    name: network-setup
    inline:
      cluster:
        extraManifests:
          #% for manifest in node.manifests %#
          - #{ manifest }#
          #% endfor %#
  #% endif %#
  #% if node.extension_services %#
  - # Add extension services
    name: network-setup
    inline:
      extensionServices:
        #% for es in node.extension_services %#
        - name: #{ es.name }#
          configFiles:
          #% for cf in es.configFiles %#
            - content: |-
                #{ cf.content | indent(14, yes) }#
              mountPath: #{ cf.mountPath }#
          #% endfor %#
          #% if es.environment %#
          environment:
            #% for env in es.environment %#
            - #{ env }#
            #% endfor %#
          #% endif %#
        #% endfor %#
  #% endif %#
#% for file in talos_patches('%s' % (node.name)) %#
  - file: "patches/#{ node.name }#/#{ file | basename }#"
#% endfor %#
#% endfor %#
